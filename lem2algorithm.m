function [ Q ] = lem2algorithm( U, B )  
%   
%   INPUT :  
%           U : M-by-N matrix, M is number of attributes  
%               N is the number of records  
%           B : n-by-1 vector, n is different from N in U  
%               each member in B is the index of record in U  
%   
%   OUTPUT :  
%           Q : 1-by-N cell, N is the number of Rules   
%               generated by LEM2 algorithm.  
%               each cell of Q is a rule T, T is a m-by-2 matrix,   
%               which means there are m pairs of (attribute, value)  
%   
%   Example :  
%             Temperature: 1, 2, 3 stands for very_high,high,normal, first  
%             column in U  
%             Headecha: 4, 5 stands for yes,no, 2nd column in U  
%             Weakness: 6, 7 stands for yes,no, 3rd column in U  
%             Nausea: 8, 9 stands for yes,no, 4th column in U  
%             Decision value: 1, 2 stands for yes,no, last column is U  
%   
%                  T H W N D  
%             U = [1 4 6 9 1  
%                  2 4 7 8 1  
%                  3 5 7 9 2  
%                  3 4 6 8 1  
%                  2 5 6 9 1  
%                  2 5 7 9 2  
%                  3 5 6 9 2 ];  
%              B = find(U(:,end)==1);  
%   Usage:  
%             rules = generateRules(U(:,1:end-1),B);  
%               % note when generate the rules, we should leave out the last  
%               column, or you may modify this function   
%   
%   Xu BinBin, dirkxu AT outlook DOT com  
%   Computer Science and Technology, Zhejiang University  
%   
G = B;  
G_data = U(G,:);   
n_attributes = size(G_data,2);  
Q = {};  
while size(G,1)>0  
    T = [];  
    B_notcontain_T = 1;  
    TG = [];  
    for i=1:n_attributes  
        avalue = unique(G_data(:,i));  
        tmp = numel(avalue);  
        TG = [ TG; [ i*ones(tmp,1),avalue,histc(G_data(:,i),avalue)] ];  
    end  
      
    while size(T,1)==0 || B_notcontain_T  
        max_value = max(TG(:,3));  
        tmp = find(TG(:,3)==max_value);  
        if numel(tmp)>1  
            av_pairs = TG(tmp,1:2);  
            min_value = Inf;  
            min_index = 0;  
            for i=1:size(av_pairs,1)  
                temp = numel(find(U(:,av_pairs(i,1))== av_pairs(i,2)));  
                if temp < min_value  
                    min_value = temp;  
                    min_index = i;  
                end  
            end  
            tmp = tmp(min_index);  
        end  
        rule = TG(tmp,1:2);  
        T = [T;rule];  
        m = matchedRecords(U,rule);  
        G = intersect(m,G);  
          
        TG = [];  
        G_data = U(G,:);   
        for i=1:n_attributes  
            avalue = unique(G_data(:,i));  
            tmp = numel(avalue);  
            TG = [ TG; [ i*ones(tmp,1),avalue,histc(G_data(:,i),avalue)] ];  
        end  
        [~,IA] = setdiff(TG(:,1:2),T,'rows');  
        TG = TG(IA,:);  
        % [T]  
        m = matchedRecords(U,T);  
        if all(ismember(m,B))  
            B_notcontain_T = 0;  
        else  
            B_notcontain_T = 1;  
        end  
    end  
    % for each t in T do if [T-{t}]<=B then T=T-{t}  
    ss = size(T,1);  
    if ss>1  
        for i=0:ss-1  
            tmp_rule = setdiff(T,T(ss-i,:),'rows');  
            if size(tmp_rule,1)==0  
                break;  
            end  
            m = matchedRecords(U,tmp_rule);  
            if all(ismember(m,B))  
                T = tmp_rule;  
            end  
        end  
    end  
  
    Q = [Q,T];  
    new_G = [];  
    for i=1:size(Q,2)  
        rule_T = Q{1,i}; 
        new_G = union(new_G,matchedRecords(U,rule_T));  
    end   
    G = setdiff(B,new_G);  
    G_data = U(G,:);  
end  
  
ss = size(Q,2);  
for i=0:ss-1  
    ind = ss-i;  
    tmp_Q = [Q(1,1:ind-1),Q(1,ind+1:end)];  
    tmp_B = [];  
    for j=1:size(tmp_Q)  
        tmp_B = union(tmp_B,matchedRecords(U,tmp_Q{1,j}));  
    end  
      
    if all(ismember(tmp_B,B)) && size(B,1)==size(tmp_B,1)   
        Q = tmp_Q;  
    end  
end  
    dd = length(Q);
    [mm,nn] = size(Q{1,1});
    R = zeros(mm,nn);
    for k = 1:dd
        R = Q{1,k};
    end;
    disp(R)
end  